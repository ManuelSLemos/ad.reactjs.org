{"componentChunkName":"component---src-templates-docs-js","path":"/docs/testing.html","result":{"data":{"markdownRemark":{"html":"<p>Puedes probar un componente de React similar a como pruebas otro código JavaScript.</p>\n<p>Hay varias formas de probar un componente React, la mayoría se agrupan en dos categorías:</p>\n<ul>\n<li><strong>Renderizado del árbol de componentes</strong> en un entorno de prueba simplificado y comprobando sus salidas.</li>\n<li><strong>Ejecutando la aplicación completa</strong> en un entorno de prueba más realista utilizando un navegador web (más conocido como pruebas “end-to-end”).</li>\n</ul>\n<p>Esta sección de la documentación está enfocada en estrategias de prueba para el primer caso. Mientras las pruebas de tipo “end-to-end” pueden ser muy útiles para prever regresiones a flujos de trabajos importantes, estas pruebas no están relacionadas con los componentes React particularmente y están fuera del alcance de esta sección.</p>\n<h3 id=\"tradeoffs\"><a href=\"#tradeoffs\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Concesiones </h3>\n<p>Cuando estás eligiendo las herramientas para realizar las pruebas, vale la pena considerar algunas Concesiones:</p>\n<ul>\n<li><strong>Velocidad de iteración vs Entorno realista:</strong> Algunas herramientas ofrecen un ciclo de retroalimentación muy rápido entre hacer un cambio y ver el resultado, pero no modelan el comportamiento del navegador con precisión. Otras herramientas pueden usar un entorno de navegador real, pero reducen la velocidad de iteración y son menos confiables en un servidor de integración continua.</li>\n<li><strong>Cuanto abarcar:</strong> Cuando pruebas componentes la diferencia entre Prueba Unitaria y Prueba de Integración puede ser borrosa. Si estás probando un formulario, se deben probar los botones del formulario en esta prueba? O el componente del botón debe tener su propia suit de pruebas? Debería la refactorización del botón afectar el resultado de las pruebas del formulario?</li>\n</ul>\n<p>Diferentes respuestas pueden funcionar para diferentes equipos y diferentes productos.</p>\n<h3 id=\"tools\"><a href=\"#tools\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Herramientas recomendadas </h3>\n<p><strong><a href=\"https://facebook.github.io/jest/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Jest</a></strong> Es una biblioteca de JavaScript para ejecución de pruebas que permite acceder al DOM mediante <a href=\"/ad.reactjs.org/docs/testing-environments.html#mocking-a-rendering-surface\"><code class=\"gatsby-code-text\">jsdom</code></a>. Aunque jsdom solo se aproxima a como realmente los navegadores web trabajan, usualmente es suficiente para probar componentes de React. Jest brinda una gran velocidad de iteración combinada con potentes funcionalidades como simular <a href=\"/ad.reactjs.org/docs/testing-environments.html#mocking-modules\">módulos</a> y <a href=\"/ad.reactjs.org/docs/testing-environments.html#mocking-timers\">temporizadores</a>, esto permite tener mayor control sobre cómo se ejecuta el código.</p>\n<p><strong><a href=\"https://testing-library.com/react\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Biblioteca de Pruebas para React</a></strong> es una biblioteca de utilidades que te ayudan a probar componentes React sin depender de los detalles de su implementación. Este enfoque simplifica la refactorización y también lo empuja hacia las mejores prácticas de accesibilidad, aunque no proporciona una forma de renderizar “superficialmente” un componente sin sus hijos, Jest te permite hacerlo  gracias a su funcionalidad para <a href=\"/ad.reactjs.org/docs/testing-recipes.html#mocking-modules\">simular</a>.</p>\n<h3 id=\"learn-more\"><a href=\"#learn-more\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Más Información </h3>\n<p>Esta sección está dividida en dos páginas:</p>\n<ul>\n<li><a href=\"/ad.reactjs.org/docs/testing-recipes.html\">Recetas</a>: Patrones comunes cuando escribes pruebas para componentes React.</li>\n<li><a href=\"/ad.reactjs.org/docs/testing-environments.html\">Entornos</a>: Que debes considerar cuando estés configurando un entorno de pruebas para componentes React.</li>\n</ul>","frontmatter":{"title":"Visión general de pruebas","next":"testing-recipes.html","prev":null},"fields":{"path":"content/docs/testing.md","slug":"docs/testing.html"}}},"pageContext":{"slug":"docs/testing.html"}}}