{"componentChunkName":"component---src-pages-index-js","path":"/","result":{"data":{"codeExamples":{"edges":[{"node":{"id":"a-component-using-external-plugins","code":"class MarkdownEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.md = new Remarkable();\n    this.handleChange = this.handleChange.bind(this);\n    this.state = { value: '¡Hola **mundo**!' };\n  }\n\n  handleChange(e) {\n    this.setState({ value: e.target.value });\n  }\n\n  getRawMarkup() {\n    return { __html: this.md.render(this.state.value) };\n  }\n\n  render() {\n    return (\n      <div className=\"MarkdownEditor\">\n        <h3>Entrada</h3>\n        <label htmlFor=\"markdown-content\">\n          Introduce algún texto en markdown\n        </label>\n        <textarea\n          id=\"markdown-content\"\n          onChange={this.handleChange}\n          defaultValue={this.state.value}\n        />\n        <h3>Salida</h3>\n        <div\n          className=\"content\"\n          dangerouslySetInnerHTML={this.getRawMarkup()}\n        />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <MarkdownEditor />,\n  document.getElementById('markdown-example')\n);\n","mdAbsolutePath":"/home/manuelslemos/Andalûh/ad.reactjs.org/content/home/examples/a-component-using-external-plugins.md"}},{"node":{"id":"a-stateful-component","code":"class Timer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { seconds: 0 };\n  }\n\n  tick() {\n    this.setState(state => ({\n      seconds: state.seconds + 1\n    }));\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(() => this.tick(), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    return (\n      <div>\n        Segundos: {this.state.seconds}\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <Timer />,\n  document.getElementById('timer-example')\n);","mdAbsolutePath":"/home/manuelslemos/Andalûh/ad.reactjs.org/content/home/examples/a-stateful-component.md"}},{"node":{"id":"a-simple-component","code":"class HelloMessage extends React.Component {\n  render() {\n    return (\n      <div>\n        Hola {this.props.name}\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <HelloMessage name=\"Taylor\" />,\n  document.getElementById('hello-example')\n);","mdAbsolutePath":"/home/manuelslemos/Andalûh/ad.reactjs.org/content/home/examples/a-simple-component.md"}},{"node":{"id":"an-application","code":"class TodoApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { items: [], text: '' };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  render() {\n    return (\n      <div>\n        <h3>Tareas pendientes</h3>\n        <TodoList items={this.state.items} />\n        <form onSubmit={this.handleSubmit}>\n          <label htmlFor=\"new-todo\">\n            ¿Qué se necesita hacer?\n          </label>\n          <input\n            id=\"new-todo\"\n            onChange={this.handleChange}\n            value={this.state.text}\n          />\n          <button>\n            Añadir #{this.state.items.length + 1}\n          </button>\n        </form>\n      </div>\n    );\n  }\n\n  handleChange(e) {\n    this.setState({ text: e.target.value });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    if (this.state.text.length === 0) {\n      return;\n    }\n    const newItem = {\n      text: this.state.text,\n      id: Date.now()\n    };\n    this.setState(state => ({\n      items: state.items.concat(newItem),\n      text: ''\n    }));\n  }\n}\n\nclass TodoList extends React.Component {\n  render() {\n    return (\n      <ul>\n        {this.props.items.map(item => (\n          <li key={item.id}>{item.text}</li>\n        ))}\n      </ul>\n    );\n  }\n}\n\nReactDOM.render(\n  <TodoApp />,\n  document.getElementById('todos-example')\n);\n","mdAbsolutePath":"/home/manuelslemos/Andalûh/ad.reactjs.org/content/home/examples/an-application.md"}}]},"examples":{"edges":[{"node":{"fileAbsolutePath":"/home/manuelslemos/Andalûh/ad.reactjs.org/content/home/examples/a-simple-component.md","fields":{"slug":"/home/examples/a-simple-component.html"},"frontmatter":{"title":"Un componente simple","domid":"hello-example"},"html":"<p>Los componentes de React implementan un método llamado <code class=\"gatsby-code-text\">render()</code> que recibe datos de entrada y retorna qué mostrar. Este ejemplo utiliza una sintaxis similar a XML llamada JSX. Puedes acceder a los datos de entrada que se pasan al componente mediante <code class=\"gatsby-code-text\">render()</code> a través de <code class=\"gatsby-code-text\">this.props</code>.</p>\n<p><strong>JSX es opcional y no es requerido para usar React.</strong> Prueba <a href=\"https://babeljs.io/repl/#?presets=react&code_lz=MYewdgzgLgBApgGzgWzmWBeGAeAFgRgD4AJRBEAGhgHcQAnBAEwEJsB6AwgbgChRJY_KAEMAlmDh0YWRiGABXVOgB0AczhQAokiVQAQgE8AkowAUAcjogQUcwEpeAJTjDgUACIB5ALLK6aRklTRBQ0KCohMQk6Bx4gA\" target=\"_blank\" rel=\"noreferrer\">Babel REPL</a> para ver el código JavaScript sin procesar la compilación de JSX.</p>"}},{"node":{"fileAbsolutePath":"/home/manuelslemos/Andalûh/ad.reactjs.org/content/home/examples/a-stateful-component.md","fields":{"slug":"/home/examples/a-stateful-component.html"},"frontmatter":{"title":"Un componente con estado","domid":"timer-example"},"html":"<p>Además de obtener datos de entrada (a los que accedes a través de <code class=\"gatsby-code-text\">this.props</code>), un componente puede tener datos en su estado interno (a los que accedes a través de <code class=\"gatsby-code-text\">this.state</code>). Cuando los datos del estado de un componente cambian, se vuelve a invocar <code class=\"gatsby-code-text\">render</code> con los nuevos valores en <code class=\"gatsby-code-text\">this.state</code>.</p>"}},{"node":{"fileAbsolutePath":"/home/manuelslemos/Andalûh/ad.reactjs.org/content/home/examples/an-application.md","fields":{"slug":"/home/examples/an-application.html"},"frontmatter":{"title":"Una aplicación","domid":"todos-example"},"html":"<p>Usando <code class=\"gatsby-code-text\">props</code> y <code class=\"gatsby-code-text\">state</code>, podemos integrar todo en una pequeña aplicación de tareas pendientes. Este ejemplo usa <code class=\"gatsby-code-text\">state</code> para tener un control de la lista actual de objetos así como el texto que el usuario ha ingresado. A pesar de que los manejadores de eventos parecen ser renderizados en línea, serán recolectados e implementados usando delegación de eventos.</p>"}},{"node":{"fileAbsolutePath":"/home/manuelslemos/Andalûh/ad.reactjs.org/content/home/examples/a-component-using-external-plugins.md","fields":{"slug":"/home/examples/a-component-using-external-plugins.html"},"frontmatter":{"title":"Un componente usando plugins externos","domid":"markdown-example"},"html":"<p>React permite interactuar con otras bibliotecas y frameworks. Este ejemplo usa <strong>remarkable</strong>, una biblioteca externa de Markdown, que convierte los valores de <code class=\"gatsby-code-text\">&lt;textarea&gt;</code> en tiempo real.</p>"}}]},"marketing":{"edges":[{"node":{"frontmatter":{"title":"Declarativo"},"html":"<p>React te ayuda a crear interfaces de usuario interactivas de forma sencilla. Diseña vistas simples para cada estado en tu aplicación, y React se encargará de actualizar y renderizar de manera eficiente los componentes correctos cuando los datos cambien.</p>\n<p>Las vistas declarativas hacen que tu código sea más predecible, por lo tanto, fácil de depurar.</p>"}},{"node":{"frontmatter":{"title":"Basado en componentes"},"html":"<p>Crea componentes encapsulados que manejen su propio estado,\ny conviértelos en interfaces de usuario complejas.</p>\n<p>Ya que la lógica de los componentes está escrita en JavaScript y no en plantillas,\npuedes pasar datos de forma sencilla a través de tu aplicación y mantener el estado fuera del DOM.</p>"}},{"node":{"frontmatter":{"title":"Aprende una vez, escríbelo donde sea"},"html":"<p>En React no dejamos fuera al resto de tus herramientas tecnológicas, así que podrás desarrollar nuevas características sin necesidad de volver a escribir el código existente.</p>\n<p>React puede también renderizar desde el servidor usando Node, así como potencializar aplicaciones móviles usando\n<a href=\"https://reactnative.dev/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React Native</a>.</p>"}}]}},"pageContext":{}}}