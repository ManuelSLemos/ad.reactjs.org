{"componentChunkName":"component---src-templates-codepen-example-js","path":"/redirect-to-codepen/context/motivation-solution","result":{"pageContext":{"action":"https://codepen.io/pen/define","payload":"{\"editors\":\"0010\",\"html\":\"<div id=\\\"root\\\"></div>\",\"js\":\"// highlight-range{1-4}\\n// Context nos permite pasar un valor a lo profundo del árbol de componentes\\n// sin pasarlo explícitamente a través de cada componente.\\n// Crear un Context para el tema actual (con \\\"light\\\" como valor predeterminado).\\nconst ThemeContext = React.createContext('light');\\n\\nclass App extends React.Component {\\n  render() {\\n    // highlight-range{1-3,5}\\n    // Usa un Provider para pasar el tema actual al árbol de abajo.\\n    // Cualquier componente puede leerlo, sin importar qué tan profundo se encuentre.\\n    // En este ejemplo, estamos pasando \\\"dark\\\" como valor actual.\\n    return (\\n      <ThemeContext.Provider value=\\\"dark\\\">\\n        <Toolbar />\\n      </ThemeContext.Provider>\\n    );\\n  }\\n}\\n\\n// highlight-range{1,2}\\n// Un componente en el medio no tiene que\\n// pasar el tema hacia abajo explícitamente.\\nfunction Toolbar() {\\n  return (\\n    <div>\\n      <ThemedButton />\\n    </div>\\n  );\\n}\\n\\nclass ThemedButton extends React.Component {\\n  // highlight-range{1-3,6}\\n  // Asigna un contextType para leer el contexto del tema actual.\\n  // React encontrará el Provider superior más cercano y usará su valor.\\n  // En este ejemplo, el tema actual es \\\"dark\\\".\\n  static contextType = ThemeContext;\\n  render() {\\n    return <Button theme={this.context} />;\\n  }\\n}\\n\",\"js_external\":\"//unpkg.com/react/umd/react.development.js;//unpkg.com/react-dom/umd/react-dom.development.js\",\"js_pre_processor\":\"babel\",\"layout\":\"left\"}"}}}